UIClassJuly-7-2016_Homework18

1)	Look into java script hoisting, explain with an example? 

In hoisting variable and function declarations are put into memory during the compile phase, but stays exactly where we typed it in our coding.  
A variable can be used before it has been declared.

Ex1:
<!doctype html>
<html>
<script>
console.log(a); //undefined : a value is not initialized at top.
        var a = 10; 
        function func1() {
            b=50;
            console.log(a);//undefined : a value is not defined inside loop
            var a = 20; 
        }
        func1();
        console.log(a);//prints 10
        console.log(b);//prints 50
</script>
</html>

Ex2:
<!doctype html>
<html>
<script>
console.log(func1);// it prints func1
console.log(func2);//undefined: we have not initialized func2 at top; 
        function func1 () {
            console.log('This function will be hoisted')
        };
        var func2 = function () { 
            console.log('This variable will be hoisted');
        };	
    </script></html>


Ex3:
<!doctype html>
<html>
    <script>
function localScope(){

    function hoisted(){
        console.log('This is the hoisted function');
    }
    var logThis;
    logThis="hello!";
    console.log(logThis);//hello
    hoisted();//This is the hoisted function
}
localScope();
    </script></html>

JavaScript only hoists declarations, not initializations. If we are using a variable that is declared and initialized after using it, the value will be undefined. 
Example:
var x = 1; // Initialize x
console.log(x + " " + y);  //y is undefined
var y = 2;
//the above code and the below code are the same

var x = 1; // Initialize x
var y; // Declare y
console.log(x + " " + y);  //y is undefined
y = 2; // Initialize y